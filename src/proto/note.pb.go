// Code generated by protoc-gen-go.
// source: note.proto
// DO NOT EDIT!

package notekeeper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of RequestHeader from common.proto

// Ignoring public import of ResponseHeader from common.proto

// Ignoring public import of Title from title.proto

// This is just note metadata
// Note content is treated separately
type Note struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name      *Title `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Revisions int32  `protobuf:"varint,4,opt,name=revisions" json:"revisions,omitempty"`
	Locked    bool   `protobuf:"varint,5,opt,name=locked" json:"locked,omitempty"`
	Created   string `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	Updated   string `protobuf:"bytes,7,opt,name=updated" json:"updated,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Note) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Note) GetName() *Title {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Note) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Note) GetRevisions() int32 {
	if m != nil {
		return m.Revisions
	}
	return 0
}

func (m *Note) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *Note) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Note) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

type CreateNoteRequest struct {
	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NotebookId string         `protobuf:"bytes,2,opt,name=notebookId" json:"notebookId,omitempty"`
	Scope      string         `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
	Name       *Title         `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *CreateNoteRequest) Reset()                    { *m = CreateNoteRequest{} }
func (m *CreateNoteRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNoteRequest) ProtoMessage()               {}
func (*CreateNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CreateNoteRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateNoteRequest) GetNotebookId() string {
	if m != nil {
		return m.NotebookId
	}
	return ""
}

func (m *CreateNoteRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *CreateNoteRequest) GetName() *Title {
	if m != nil {
		return m.Name
	}
	return nil
}

type DeleteNoteRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NoteId string         `protobuf:"bytes,2,opt,name=noteId" json:"noteId,omitempty"`
	Scope  string         `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
}

func (m *DeleteNoteRequest) Reset()                    { *m = DeleteNoteRequest{} }
func (m *DeleteNoteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNoteRequest) ProtoMessage()               {}
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DeleteNoteRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteNoteRequest) GetNoteId() string {
	if m != nil {
		return m.NoteId
	}
	return ""
}

func (m *DeleteNoteRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type GetNotesRequest struct {
	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NotebookId string         `protobuf:"bytes,2,opt,name=notebookId" json:"notebookId,omitempty"`
	Scope      string         `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
}

func (m *GetNotesRequest) Reset()                    { *m = GetNotesRequest{} }
func (m *GetNotesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNotesRequest) ProtoMessage()               {}
func (*GetNotesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GetNotesRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetNotesRequest) GetNotebookId() string {
	if m != nil {
		return m.NotebookId
	}
	return ""
}

func (m *GetNotesRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type GetNotesResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Notes  []*Note         `protobuf:"bytes,2,rep,name=notes" json:"notes,omitempty"`
}

func (m *GetNotesResponse) Reset()                    { *m = GetNotesResponse{} }
func (m *GetNotesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNotesResponse) ProtoMessage()               {}
func (*GetNotesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *GetNotesResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetNotesResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func init() {
	proto.RegisterType((*Note)(nil), "notekeeper.Note")
	proto.RegisterType((*CreateNoteRequest)(nil), "notekeeper.CreateNoteRequest")
	proto.RegisterType((*DeleteNoteRequest)(nil), "notekeeper.DeleteNoteRequest")
	proto.RegisterType((*GetNotesRequest)(nil), "notekeeper.GetNotesRequest")
	proto.RegisterType((*GetNotesResponse)(nil), "notekeeper.GetNotesResponse")
}

func init() { proto.RegisterFile("note.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x35, 0x5d, 0xdb, 0xb9, 0x5b, 0xd1, 0x2d, 0xc8, 0x88, 0x43, 0xa4, 0x14, 0x94, 0x3e, 0x0d,
	0xac, 0x9f, 0xa0, 0xa0, 0xbe, 0xc8, 0x08, 0xfe, 0xc0, 0xd6, 0x5c, 0xb0, 0x6c, 0x6b, 0x6a, 0x93,
	0x09, 0xfa, 0x3b, 0x7e, 0x86, 0x3f, 0x27, 0xbd, 0x8d, 0xdb, 0x1c, 0xe2, 0x8b, 0xe0, 0x5b, 0x4e,
	0xce, 0xb9, 0x39, 0xf7, 0x1c, 0x02, 0x50, 0x6a, 0x8b, 0xe3, 0xaa, 0xd6, 0x56, 0x73, 0x3a, 0xcf,
	0x11, 0x2b, 0xac, 0x47, 0x07, 0xb9, 0x5e, 0x2e, 0x75, 0xd9, 0x32, 0xa3, 0xc8, 0x16, 0x76, 0xe1,
	0x64, 0xc9, 0x07, 0x03, 0xff, 0x41, 0x5b, 0xe4, 0x87, 0xe0, 0x15, 0x4a, 0xb0, 0x98, 0xa5, 0x3d,
	0xe9, 0x15, 0x8a, 0x9f, 0x83, 0x5f, 0x4e, 0x97, 0x28, 0xbc, 0x98, 0xa5, 0x51, 0x36, 0x18, 0x6f,
	0x9e, 0x1b, 0x3f, 0x36, 0xf3, 0x92, 0x68, 0xce, 0xc1, 0xb7, 0xaf, 0x15, 0x8a, 0x0e, 0x0d, 0xd2,
	0x99, 0x9f, 0x42, 0xaf, 0xc6, 0x97, 0xc2, 0x14, 0xba, 0x34, 0xc2, 0x8f, 0x59, 0x1a, 0xc8, 0xcd,
	0x05, 0x1f, 0x42, 0xb8, 0xd0, 0xf9, 0x1c, 0x95, 0x08, 0x62, 0x96, 0xee, 0x4b, 0x87, 0xb8, 0x80,
	0x6e, 0x5e, 0xe3, 0xd4, 0xa2, 0x12, 0x21, 0x3d, 0xf6, 0x05, 0x1b, 0x66, 0x55, 0x29, 0x62, 0xba,
	0x2d, 0xe3, 0x60, 0xf2, 0xce, 0x60, 0x70, 0x4d, 0xaa, 0x26, 0x83, 0xc4, 0xe7, 0x15, 0x1a, 0xcb,
	0x2f, 0x21, 0x7c, 0xc2, 0xa9, 0xc2, 0x9a, 0xe2, 0x44, 0xd9, 0xc9, 0xf6, 0xf2, 0x4e, 0x74, 0x47,
	0x02, 0xe9, 0x84, 0xfc, 0xac, 0xed, 0x6e, 0xa6, 0xf5, 0xfc, 0x5e, 0x51, 0xe6, 0x9e, 0xdc, 0xba,
	0xe1, 0xc7, 0x10, 0x98, 0x5c, 0xaf, 0x73, 0xb6, 0x60, 0xdd, 0x91, 0xff, 0x6b, 0x47, 0x89, 0x85,
	0xc1, 0x0d, 0x2e, 0xf0, 0xcf, 0x4b, 0x0e, 0x21, 0x6c, 0x34, 0xeb, 0x05, 0x1d, 0xfa, 0x79, 0xb9,
	0xe4, 0x0d, 0x8e, 0x6e, 0xd1, 0x36, 0x96, 0xe6, 0xbf, 0x8b, 0x49, 0x4a, 0xe8, 0x6f, 0xbc, 0x4d,
	0xa5, 0x4b, 0x83, 0x3c, 0xdb, 0x31, 0x1f, 0x7d, 0x37, 0x6f, 0x55, 0x3b, 0xee, 0x17, 0x10, 0x34,
	0x22, 0x23, 0xbc, 0xb8, 0x93, 0x46, 0x59, 0x7f, 0x7b, 0x84, 0xca, 0x6c, 0xe9, 0xc9, 0xde, 0x84,
	0xcd, 0x42, 0xfa, 0xd0, 0x57, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x79, 0xef, 0xb9, 0x05,
	0x03, 0x00, 0x00,
}
