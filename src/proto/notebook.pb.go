// Code generated by protoc-gen-go.
// source: notebook.proto
// DO NOT EDIT!

package notekeeper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of RequestHeader from common.proto

// Ignoring public import of ResponseHeader from common.proto

type CreateNotebookRequest struct {
	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Name    string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UserId  string         `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ShelfId string         `protobuf:"bytes,4,opt,name=shelf_id,json=shelfId" json:"shelf_id,omitempty"`
}

func (m *CreateNotebookRequest) Reset()                    { *m = CreateNotebookRequest{} }
func (m *CreateNotebookRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNotebookRequest) ProtoMessage()               {}
func (*CreateNotebookRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *CreateNotebookRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateNotebookRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNotebookRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateNotebookRequest) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateNotebookRequest)(nil), "notekeeper.CreateNotebookRequest")
}

func init() { proto.RegisterFile("notebook.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcb, 0x2f, 0x49,
	0x4d, 0xca, 0xcf, 0xcf, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0xf1, 0xb3, 0x53,
	0x53, 0x0b, 0x52, 0x8b, 0xa4, 0x78, 0x92, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0x20, 0x32, 0x4a, 0x93,
	0x18, 0xb9, 0x44, 0x9d, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0xfd, 0xa0, 0x5a, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0x0c, 0xb9, 0xd8, 0x32, 0x52, 0x13, 0x53, 0x52, 0x8b, 0x24, 0x18, 0x15,
	0x18, 0x35, 0xb8, 0x8d, 0x24, 0xf5, 0x10, 0x86, 0xe8, 0x41, 0x15, 0x79, 0x80, 0x15, 0x04, 0x41,
	0x15, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06,
	0x81, 0xd9, 0x42, 0xe2, 0x5c, 0xec, 0xa5, 0xc5, 0xa9, 0x45, 0xf1, 0x99, 0x29, 0x12, 0xcc, 0x60,
	0x61, 0x36, 0x10, 0xd7, 0x33, 0x45, 0x48, 0x92, 0x8b, 0xa3, 0x38, 0x23, 0x35, 0x27, 0x0d, 0x24,
	0xc3, 0x02, 0x96, 0x61, 0x07, 0xf3, 0x3d, 0x53, 0x02, 0x18, 0x92, 0xd8, 0xc0, 0xae, 0x33, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x77, 0x31, 0x35, 0x47, 0xc9, 0x00, 0x00, 0x00,
}
