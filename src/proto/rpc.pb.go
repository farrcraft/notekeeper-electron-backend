// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package notekeeper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of RequestHeader from common.proto

// Ignoring public import of ResponseHeader from common.proto

type EmptyRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *EmptyRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type EmptyResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *EmptyResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// a generic RPC request message containing a common UUID string
type IdRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id     string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *IdRequest) Reset()                    { *m = IdRequest{} }
func (m *IdRequest) String() string            { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()               {}
func (*IdRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *IdRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// a generic RPC response message containing a common UUID string
type IdResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id     string          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *IdResponse) Reset()                    { *m = IdResponse{} }
func (m *IdResponse) String() string            { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()               {}
func (*IdResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *IdResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "notekeeper.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "notekeeper.EmptyResponse")
	proto.RegisterType((*IdRequest)(nil), "notekeeper.IdRequest")
	proto.RegisterType((*IdResponse)(nil), "notekeeper.IdResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0xcb, 0x2f, 0x49, 0xcd, 0x4e, 0x4d, 0x2d, 0x48,
	0x2d, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0xc8, 0x28, 0x39, 0x72, 0xf1, 0xb8,
	0xe6, 0x16, 0x94, 0x54, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x19, 0x72, 0xb1, 0x65,
	0xa4, 0x26, 0xa6, 0xa4, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xea, 0x21, 0xb4,
	0xea, 0x41, 0x15, 0x79, 0x80, 0x15, 0x04, 0x41, 0x15, 0x2a, 0x39, 0x73, 0xf1, 0x42, 0x8d, 0x28,
	0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x32, 0x42, 0x33, 0x43, 0x0a, 0xd5, 0x0c, 0x88, 0x2a, 0x34,
	0x43, 0xfc, 0xb8, 0x38, 0x3d, 0x53, 0xc8, 0x77, 0x84, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04,
	0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x53, 0x66, 0x8a, 0x52, 0x00, 0x17, 0x17, 0xc8, 0x3c, 0xf2,
	0x5d, 0x84, 0x6e, 0x62, 0x00, 0x43, 0x12, 0x1b, 0x38, 0xc8, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0xe4, 0xae, 0xca, 0x59, 0x01, 0x00, 0x00,
}
