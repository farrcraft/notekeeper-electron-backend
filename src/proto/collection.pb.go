// Code generated by protoc-gen-go.
// source: collection.proto
// DO NOT EDIT!

package notekeeper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of RequestHeader from common.proto

// Ignoring public import of ResponseHeader from common.proto

// Ignoring public import of Title from title.proto

type Collection struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    *Title `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Locked  bool   `protobuf:"varint,3,opt,name=locked" json:"locked,omitempty"`
	ShelfId string `protobuf:"bytes,4,opt,name=shelfId" json:"shelfId,omitempty"`
	Created string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	Updated string `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Collection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Collection) GetName() *Title {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Collection) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *Collection) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func (m *Collection) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Collection) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

type GetCollectionsRequest struct {
	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ShelfId string         `protobuf:"bytes,2,opt,name=shelfId" json:"shelfId,omitempty"`
	Scope   string         `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
}

func (m *GetCollectionsRequest) Reset()                    { *m = GetCollectionsRequest{} }
func (m *GetCollectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCollectionsRequest) ProtoMessage()               {}
func (*GetCollectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetCollectionsRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetCollectionsRequest) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func (m *GetCollectionsRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type GetCollectionsResponse struct {
	Header      *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Collections []*Collection   `protobuf:"bytes,2,rep,name=collections" json:"collections,omitempty"`
}

func (m *GetCollectionsResponse) Reset()                    { *m = GetCollectionsResponse{} }
func (m *GetCollectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCollectionsResponse) ProtoMessage()               {}
func (*GetCollectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetCollectionsResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetCollectionsResponse) GetCollections() []*Collection {
	if m != nil {
		return m.Collections
	}
	return nil
}

type CreateCollectionRequest struct {
	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Name    *Title         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ShelfId string         `protobuf:"bytes,3,opt,name=shelfId" json:"shelfId,omitempty"`
	Scope   string         `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
}

func (m *CreateCollectionRequest) Reset()                    { *m = CreateCollectionRequest{} }
func (m *CreateCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCollectionRequest) ProtoMessage()               {}
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CreateCollectionRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateCollectionRequest) GetName() *Title {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreateCollectionRequest) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func (m *CreateCollectionRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type SaveCollectionRequest struct {
	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id      string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ShelfId string         `protobuf:"bytes,3,opt,name=shelfId" json:"shelfId,omitempty"`
	Scope   string         `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
	Name    *Title         `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Locked  bool           `protobuf:"varint,6,opt,name=locked" json:"locked,omitempty"`
}

func (m *SaveCollectionRequest) Reset()                    { *m = SaveCollectionRequest{} }
func (m *SaveCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveCollectionRequest) ProtoMessage()               {}
func (*SaveCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SaveCollectionRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SaveCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SaveCollectionRequest) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func (m *SaveCollectionRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *SaveCollectionRequest) GetName() *Title {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SaveCollectionRequest) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type DeleteCollectionRequest struct {
	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id      string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ShelfId string         `protobuf:"bytes,3,opt,name=shelfId" json:"shelfId,omitempty"`
	Scope   string         `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
}

func (m *DeleteCollectionRequest) Reset()                    { *m = DeleteCollectionRequest{} }
func (m *DeleteCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCollectionRequest) ProtoMessage()               {}
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DeleteCollectionRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteCollectionRequest) GetShelfId() string {
	if m != nil {
		return m.ShelfId
	}
	return ""
}

func (m *DeleteCollectionRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func init() {
	proto.RegisterType((*Collection)(nil), "notekeeper.Collection")
	proto.RegisterType((*GetCollectionsRequest)(nil), "notekeeper.GetCollectionsRequest")
	proto.RegisterType((*GetCollectionsResponse)(nil), "notekeeper.GetCollectionsResponse")
	proto.RegisterType((*CreateCollectionRequest)(nil), "notekeeper.CreateCollectionRequest")
	proto.RegisterType((*SaveCollectionRequest)(nil), "notekeeper.SaveCollectionRequest")
	proto.RegisterType((*DeleteCollectionRequest)(nil), "notekeeper.DeleteCollectionRequest")
}

func init() { proto.RegisterFile("collection.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x7d, 0x93, 0xb6, 0x79, 0xf6, 0x46, 0x44, 0x07, 0xdb, 0x8e, 0x5d, 0x85, 0x80, 0x90, 0x55,
	0xc1, 0xb8, 0x71, 0x5f, 0x41, 0xdd, 0x95, 0xd1, 0x1f, 0x88, 0x99, 0x2b, 0x0d, 0x4d, 0x33, 0x31,
	0x33, 0x75, 0xe1, 0x07, 0xb8, 0xf2, 0x2f, 0x5c, 0xf9, 0x29, 0xfe, 0x95, 0x74, 0x92, 0x36, 0xd3,
	0x82, 0x50, 0xc5, 0x85, 0xcb, 0xc3, 0x39, 0xb9, 0xe7, 0xdc, 0x33, 0x37, 0x70, 0x98, 0xc8, 0x2c,
	0xc3, 0x44, 0xa7, 0x32, 0x1f, 0x15, 0xa5, 0xd4, 0x92, 0x42, 0x2e, 0x35, 0xce, 0x10, 0x0b, 0x2c,
	0x87, 0xfb, 0x89, 0x9c, 0xcf, 0x57, 0xcc, 0xd0, 0xd3, 0xa9, 0xce, 0xb0, 0x02, 0xc1, 0x3b, 0x01,
	0x18, 0xaf, 0xbf, 0xa5, 0x07, 0xe0, 0xa4, 0x82, 0x11, 0x9f, 0x84, 0x5d, 0xee, 0xa4, 0x82, 0x9e,
	0x42, 0x3b, 0x8f, 0xe7, 0xc8, 0x1c, 0x9f, 0x84, 0x5e, 0x74, 0x34, 0x6a, 0x86, 0x8e, 0xee, 0x96,
	0x53, 0xb8, 0xa1, 0x69, 0x1f, 0xdc, 0x4c, 0x26, 0x33, 0x14, 0xac, 0xe5, 0x93, 0x70, 0x8f, 0xd7,
	0x88, 0x32, 0xf8, 0xaf, 0xa6, 0x98, 0x3d, 0xdc, 0x08, 0xd6, 0x36, 0x33, 0x57, 0x70, 0xc9, 0x24,
	0x25, 0xc6, 0x1a, 0x05, 0xeb, 0x54, 0x4c, 0x0d, 0x97, 0xcc, 0xa2, 0x10, 0x86, 0x71, 0x2b, 0xa6,
	0x86, 0xc1, 0x33, 0xf4, 0xae, 0x50, 0x37, 0x69, 0x15, 0xc7, 0xc7, 0x05, 0x2a, 0x4d, 0xcf, 0xc0,
	0x9d, 0x62, 0x2c, 0xb0, 0x34, 0xc9, 0xbd, 0xe8, 0xc4, 0xce, 0x59, 0x8b, 0xae, 0x8d, 0x80, 0xd7,
	0x42, 0x3b, 0x99, 0xb3, 0x99, 0xec, 0x18, 0x3a, 0x2a, 0x91, 0x05, 0x9a, 0x55, 0xba, 0xbc, 0x02,
	0xc1, 0x0b, 0x81, 0xfe, 0xb6, 0xb9, 0x2a, 0x64, 0xae, 0x90, 0x46, 0x5b, 0xee, 0xc3, 0x4d, 0xf7,
	0x4a, 0xb5, 0x65, 0x7f, 0x01, 0x5e, 0xf3, 0x62, 0x8a, 0x39, 0x7e, 0x2b, 0xf4, 0xa2, 0xbe, 0xfd,
	0x61, 0xe3, 0xc4, 0x6d, 0x69, 0xf0, 0x46, 0x60, 0x30, 0x36, 0x55, 0x59, 0x8a, 0x9f, 0xf7, 0xb0,
	0xe3, 0x03, 0x5b, 0x75, 0xb5, 0xbe, 0xa8, 0xab, 0x6d, 0xd7, 0xf5, 0x41, 0xa0, 0x77, 0x1b, 0x3f,
	0xfd, 0x4e, 0xc6, 0xea, 0x28, 0x9d, 0xf5, 0x51, 0x7e, 0x33, 0xcc, 0x7a, 0xc7, 0xce, 0xae, 0x47,
	0xec, 0xda, 0x47, 0x1c, 0xbc, 0x12, 0x18, 0x5c, 0x62, 0x86, 0xfa, 0x4f, 0x6c, 0x33, 0xf9, 0x37,
	0x21, 0xf7, 0xae, 0xf9, 0x79, 0xcf, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x34, 0x42, 0xa5, 0x3c,
	0xf7, 0x03, 0x00, 0x00,
}
